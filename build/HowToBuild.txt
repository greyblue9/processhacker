Инструкция по сборке Process Hacker 2.х

Сборка Process Hacker производжится в среде MS VS 2010 SP1 с установленными
Microsoft Windows SDK for Windows 7 and .NET Framework 4 в следующем порядке:

ДО НАЧАЛА ЛЮБЫХ ОПЕРАЦИЙ ПО СБОРКЕ!

В Microsoft Windows SDK for Windows 7 and .NET Framework 4 допущен ряд грубых
синтаксических ошибок нарушающих спецификации языка С/С++ из-за чего очень
многие программы не собираются. Их надо исправить, но Микрософт это сделать
не торопится.

   Для исправления ошибок в WinSDK v7.1 достаточно перезаписать в каталоге
   %ProgramFiles%\Microsoft SDKs\Windows\v7.1\Include файлы fwptypes.h и
   iketypes.h Вашеей локальной копии SDK их исправленными копиями (спасибо
   dmex-у с processhacker.sourceforge.net за обнаружение данной ошибки в
   WinSDK и подсказку как её исправить), но, т.к. в ревизии 4994 использован
   Microsoft Windows SDK for Visual Studio 2010 в котором ошибок не меньше,
   то исправьте и его с учётом инструкции приведённой в файле sdk_bug.txt.
   Данная инструкция написана по опыту исправленя SDK v7.1 - ошибки точно
   такие же и судя по всему надо во всех MS SDK переделывать #DIFINE - почти
   все записаны с нарушениями синтаксиса и правил C/C++. Miscrosoft (с) :-)

   Если ошибки в SDK уже исправлены, то переходим к собственно сборке,

1) Открываем каталог ./src/trunk - сейчас он у нас будет рабочим.

2) Собираем решение ./trunk/ProcessHacker.sln для Win32 и для Win64, обе
   платформы!!! иначе потом ничего не соберётся - ЗАВИСИМОСТИ!

   Лучше всего ПЕРЕСОБРАТЬ проект целиком - Ctrl+Alt+F7

3) Пересобираем проект philb из решения ProcessHacker.sln в отладочном варианте
   для платформ Win32 и Win64 и закрываем решение ProcessHacker.sln - свою
   работу оно выполнило и более нам не нужно.

4) Открываем каталог ./build/sdk и запускаем makesdk.cmd - он создаст SDK для
   сборки плагинов используя созданные на этапах 1) и 2) библиотеким и модули.

5) Открываем решение ./plugins/Plugins.sln и пересобираем все плагины для
   платформ Win32 и Win64.

   При наличии собранного на этапах 1) - 3) SDK ошибок не будет. Если хоть
   один плагин не соберётся, то выбрать очистку и повторить пункты 1) - 3)
   заново т.к. это значит что какая то библиотека не собралась или повреждена!

6) Открываем решение ./plugins-extra/ExtraPlugins.sln и пересобираем и эти
   плагины для платформ Win32 и Win64.

   При наличии собранного на этапах 1) - 3) SDK ошибок не будет. Если хоть
   один плагин не соберётся, то выбрать очистку и повторить пункты 1) - 3)
   заново т.к. это значит что какая-то библиотека не собралась или повреждена!

7) Запускаем скрипт ./trunk/release.cmd <version_manor> - он создаст
   каталог ./bin, скопирует туда все готовые бинарники и документацию, затем
   соберёт все нужные архивы и инсталлятор и завершится.

   Пример его вызова: release.cmd 21 - собрать версию 2.21

   Старшая цифра номера версии уже прописана в скрипте, её вводить не нужно.

8) Запускаем скрипт makesdk.cmd <version_manor> и он упакует SDK.
   Но его запускаем только после отработки release.cmd!!!

9) При необходимости тестирования все модули должны распологаться в следущей
   файловй структуре и никак иначе (положите плагины в подкаталог каталога
   ./plugins/ или в иное место, и они не будут загружены, даже если программа
   их и увидит!!!):

         ./
         CHANGELOG.txt
         COPYRIGHT.txt
         HACKING.txt
         LICENSE.txt
         plugins
         README.txt
         kprocesshacker.sys
         peview.exe
         ProcessHacker.exe

         ./plugins/

         AtomTablePlugin.dll
         AvgCpuPlugin.dll
         DbgViewPlugin.dll
         DnsCachePlugin.dll
         DotNetTools.dll
         ExtendedNotifications.dll
         ExtendedServices.dll
         ExtendedTools.dll
         HexPidPlugin.dll
         HighlightPlugin.dll
         NetAdapters.dll
         NetworkTools.dll
         NvGpuPlugin.dll
         OnlineChecks.dll
         PerfMonPlugin.dll
         ROTViewerPlugin.dll
         SbieSupport.dll
         SetCriticalPlugin.dll
         ToolStatus.dll
         Updater.dll
         UserNotes.dll
         WaitChainPlugin.dll
         WindowExplorer.dll

10) Скрипты для автоматизации сборки и особенности их применения:

  10.1) Все модифицированные скрипты предусматривают только один параметр
       вызова - <version_manor>, а значение <version_majnor> уже прописано
       в скриптах.

  10.2) Для правильной работы скрипта release.cmd вызываемые им модули iscc,
       tar, bzip, 7z, svn должны обязательно быть прописаны через переменную
       среды %PATH% !

  10.3) Скрипты из комплекта "processhacker_builtools.7z" должны находится в
       следующих каталогах, т.к. все пути в них относительные и привязаны к
       к данной структуре каталогов:

        ./src/

              build.cmd
              csvn.cmd
              distrib.cmd
              makesrc.cmd
              release.cmd

        ./src/trunk/

             makesdk.cmd

        ./trunk/build/Installer/

              Process_Hacker2_installer_full.iss

ПРИМЕЧАНИЕ:

   Начиная с ревизии SVN r4528 выходные каталоги проектов поменялись и
   теперь для основных модулей и плагинов, пока за исключением Extended
   Plugins целевым каталом стал каталог ./trunk/bin/ и его подкаталоги в
   связи с чем сборочные скрипты были переписаны и должны быть обязательно
   обновлены! А появление новых плагинов требует новых правок скриптов.

   Старые сборочные скрипты начиная с ревизии 5782 не работают, т.к. не
   учитывают внесённые в код изменения!